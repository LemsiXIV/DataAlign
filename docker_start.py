#!/usr/bin/env python3
"""
Script de d√©marrage rapide Docker pour DataAlign
"""
import subprocess
import sys
import time
from pathlib import Path

def run_command(command, description, critical=True):
    """Ex√©cute une commande avec gestion d'erreur"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        print(f"‚úÖ {description} - OK")
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - ERREUR: {e}")
        if e.stderr:
            print(f"   Erreur: {e.stderr.strip()[:200]}...")
        if critical:
            print("‚ö†Ô∏è Erreur critique - Arr√™t")
            sys.exit(1)
        return None

def check_docker():
    """V√©rifier que Docker est install√© et disponible"""
    print("1Ô∏è‚É£ V√âRIFICATION DOCKER")
    print("-" * 40)
    
    # V√©rifier Docker
    docker_version = run_command("docker --version", "Version Docker")
    if not docker_version:
        print("‚ùå Docker n'est pas install√© ou non disponible")
        print("üìù Installez Docker depuis: https://docs.docker.com/get-docker/")
        sys.exit(1)
    
    # V√©rifier Docker Compose
    compose_version = run_command("docker-compose --version", "Version Docker Compose", critical=False)
    if not compose_version:
        print("‚ö†Ô∏è Docker Compose non trouv√©, tentative avec 'docker compose'")
        compose_version = run_command("docker compose version", "Version Docker Compose v2", critical=False)
    
    print("‚úÖ Docker est pr√™t\n")

def build_image():
    """Construire l'image Docker"""
    print("2Ô∏è‚É£ CONSTRUCTION IMAGE DOCKER DEV")
    print("-" * 40)
    
    # Set environment for compatibility
    run_command("export DOCKER_BUILDKIT=0", "D√©sactivation BuildKit", critical=False)
    
    # Build de l'image avec Dockerfile.dev
    run_command(
        "docker build -f Dockerfile.dev -t dataalign:latest .", 
        "Construction image DataAlign DEV"
    )
    
    # V√©rifier l'image
    run_command(
        "docker images dataalign:latest", 
        "V√©rification image cr√©√©e"
    )
    
    print("‚úÖ Image Docker construite\n")

def start_development():
    """D√©marrer en mode d√©veloppement avec docker-compose.dev.yml"""
    print("3Ô∏è‚É£ D√âMARRAGE MODE D√âVELOPPEMENT")
    print("-" * 40)
    
    if not Path("docker-compose.dev.yml").exists():
        print("‚ùå Fichier docker-compose.dev.yml non trouv√©")
        return False
    
    # Set timeouts for WSL
    run_command("export COMPOSE_HTTP_TIMEOUT=300", "Configuration timeout", critical=False)
    run_command("export DOCKER_CLIENT_TIMEOUT=300", "Configuration timeout Docker", critical=False)
    
    # Arr√™ter les services existants
    run_command(
        "docker-compose -f docker-compose.dev.yml down -v", 
        "Arr√™t services existants", 
        critical=False
    )
    
    # Nettoyer Docker
    run_command(
        "docker system prune -f", 
        "Nettoyage Docker", 
        critical=False
    )
    
    # D√©marrer MySQL d'abord
    run_command(
        "docker-compose -f docker-compose.dev.yml up -d mysql", 
        "D√©marrage MySQL"
    )
    
    print("‚è≥ Attente MySQL (45s)...")
    time.sleep(45)
    
    # D√©marrer tous les services
    run_command(
        "docker-compose -f docker-compose.dev.yml up -d", 
        "D√©marrage de tous les services"
    )
    
    # Attendre que les services soient pr√™ts
    print("‚è≥ Attente d√©marrage complet (30s)...")
    time.sleep(30)
    
    # V√©rifier les services
    run_command(
        "docker-compose -f docker-compose.dev.yml ps", 
        "√âtat des services"
    )
    
    return True

def show_info():
    """Afficher les informations de connexion"""
    print("4Ô∏è‚É£ INFORMATIONS DE CONNEXION")
    print("-" * 40)
    
    print("üåê URLS DISPONIBLES:")
    print("   ‚Ä¢ Application: http://localhost:5006")
    print("   ‚Ä¢ Base de donn√©es (Adminer): http://localhost:8081")
    print("   ‚Ä¢ Emails (MailHog): http://localhost:8026")
    
    print("\nüë§ COMPTES DE TEST:")
    print("   ‚Ä¢ Admin: testVikinn / admin123")
    print("   ‚Ä¢ User: testuser / test123")
    
    print("\nüóÑÔ∏è BASE DE DONN√âES (Adminer):")
    print("   ‚Ä¢ Serveur: mysql")
    print("   ‚Ä¢ Utilisateur: DataAlign")
    print("   ‚Ä¢ Mot de passe: DataAlign")
    print("   ‚Ä¢ Base: DataAlign_dev")
    
    print("\nüìß EMAILS:")
    print("   ‚Ä¢ Les emails sont captur√©s par MailHog")
    print("   ‚Ä¢ Interface web: http://localhost:8026")
    
    print("\nüîß COMMANDES UTILES:")
    print("   ‚Ä¢ Voir logs: docker-compose -f docker-compose.dev.yml logs -f app")
    print("   ‚Ä¢ Arr√™ter: docker-compose -f docker-compose.dev.yml down")
    print("   ‚Ä¢ Red√©marrer: docker-compose -f docker-compose.dev.yml restart app")
    print("   ‚Ä¢ Shell container: docker-compose -f docker-compose.dev.yml exec app bash")

def quick_test():
    """Test rapide de l'application"""
    print("\n5Ô∏è‚É£ TEST RAPIDE")
    print("-" * 40)
    
    try:
        import requests
        
        # Test page d'accueil (port mis √† jour)
        response = requests.get("http://localhost:5006", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Application accessible sur http://localhost:5006")
        else:
            print(f"‚ö†Ô∏è Application r√©pond avec code: {response.status_code}")
        
        # Test page de login
        response = requests.get("http://localhost:5006/auth/login", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Page de login accessible")
        else:
            print(f"‚ö†Ô∏è Page de login code: {response.status_code}")
            
    except ImportError:
        print("‚ö†Ô∏è Module 'requests' non install√© - test manuel requis")
        print("   Testez manuellement: http://localhost:5006")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur test: {e}")
        print("   V√©rifiez manuellement: http://localhost:5006")

def main():
    """Fonction principale"""
    print("üê≥ D√âMARRAGE RAPIDE DOCKER DEV - DATAALIGN")
    print("=" * 50)
    print("üéØ Configuration et lancement automatique (Mode DEV)")
    print("=" * 50 + "\n")
    
    try:
        # V√©rifications
        check_docker()
        
        # Construction
        build_image()
        
        # D√©marrage
        success = start_development()
        
        if success:
            # Informations
            show_info()
            
            # Test rapide
            quick_test()
            
            print("\nüéâ DATAALIGN DOCKER DEV EST PR√äT !")
            print("=" * 50)
            print("üåê Ouvrez votre navigateur sur: http://localhost:5006")
            print("üîê Connectez-vous avec: testVikinn / admin123")
            print("üìß Emails captur√©s sur: http://localhost:8026")
            print("\nüìã Pour arr√™ter: docker-compose -f docker-compose.dev.yml down")
            
        else:
            print("‚ùå Erreur lors du d√©marrage des services")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è D√©marrage interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
