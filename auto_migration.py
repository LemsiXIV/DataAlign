import os
import subprocess
import sys

def init_auto_migration(app):
    """
    G√©n√®re automatiquement les migrations si n√©cessaire et les applique,
    uniquement si la config AUTO_MIGRATION est True.
    """
    if not app.config.get("AUTO_MIGRATION", False):
        print("‚õî Auto migration d√©sactiv√©e par configuration")
        return
    
    MIGRATIONS_DIR = os.path.join(app.root_path, 'migrations')
    python_exec = sys.executable  # Python de l'environnement virtuel

    # Init si dossier migrations absent ou vide
    if not os.path.exists(MIGRATIONS_DIR) or not os.listdir(MIGRATIONS_DIR):
        print("üìÅ Dossier migrations introuvable ou vide, initialisation...")
        try:
            subprocess.run([python_exec, "cli.py", "db", "init"], check=True)
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è db init √©chou√© (peut-√™tre d√©j√† initialis√©) : {e}")
    else:
        print("‚úÖ Dossier migrations d√©tect√©")

    print("üîç V√©rification des changements de mod√®les...")

    result = subprocess.run(
        [python_exec, "cli.py", "db", "migrate", "-m", "Auto migration"],
        capture_output=True,
        text=True
    )

    if "No changes in schema detected" in result.stdout:
        print("‚úÖ Aucun changement d√©tect√© dans les mod√®les")
    else:
        print("‚úèÔ∏è Fichier de migration g√©n√©r√©")

    print("‚¨ÜÔ∏è Application des migrations...")
    try:
        subprocess.run([python_exec, "cli.py", "db", "upgrade"], check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'application des migrations : {e}")

    print("‚úÖ Base de donn√©es √† jour")
