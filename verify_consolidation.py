#!/usr/bin/env python3
"""
Script de v√©rification post-consolidation documentation
V√©rifie que tout fonctionne apr√®s la simplification des fichiers MD
"""
import os
import sys
from pathlib import Path

def check_files():
    """V√©rifier que les fichiers essentiels existent"""
    print("üìÅ V√âRIFICATION FICHIERS ESSENTIELS")
    print("-" * 40)
    
    essential_files = [
        "README_KICKSTART.md",
        "README.md", 
        "docker_start.py",
        "deploy.py",
        "maintenance.py",
        "bypass_migrations.py",
        "test_password_reset.py",
        "requirements.txt",
        "run.py",
        "Dockerfile",
        "docker-compose.yml",
        ".gitlab-ci.yml"
    ]
    
    missing_files = []
    
    for file in essential_files:
        if Path(file).exists():
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} - MANQUANT")
            missing_files.append(file)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è {len(missing_files)} fichiers manquants")
        return False
    else:
        print(f"\n‚úÖ Tous les {len(essential_files)} fichiers essentiels pr√©sents")
        return True

def check_documentation():
    """V√©rifier la documentation consolid√©e"""
    print("\nüìö V√âRIFICATION DOCUMENTATION")
    print("-" * 40)
    
    # V√©rifier README_KICKSTART.md
    kickstart_path = Path("README_KICKSTART.md")
    if kickstart_path.exists():
        content = kickstart_path.read_text(encoding='utf-8')
        
        # V√©rifier sections importantes
        sections = [
            "D√âMARRAGE ULTRA-RAPIDE",
            "DOCKER",
            "CI/CD",
            "SCRIPTS DE MAINTENANCE", 
            "R√âSOLUTION PROBL√àMES",
            "SYST√àME EMAIL",
            "S√âCURIT√â"
        ]
        
        missing_sections = []
        for section in sections:
            if section.lower() in content.lower():
                print(f"‚úÖ Section '{section}' pr√©sente")
            else:
                print(f"‚ùå Section '{section}' manquante")
                missing_sections.append(section)
        
        # Statistiques du fichier
        lines = len(content.split('\n'))
        chars = len(content)
        print(f"\nüìä README_KICKSTART.md : {lines} lignes, {chars:,} caract√®res")
        
        return len(missing_sections) == 0
    else:
        print("‚ùå README_KICKSTART.md introuvable")
        return False

def check_md_files():
    """V√©rifier qu'on n'a que les fichiers MD n√©cessaires"""
    print("\nüìÑ V√âRIFICATION FICHIERS MD")
    print("-" * 40)
    
    md_files = list(Path(".").glob("*.md"))
    
    print(f"Fichiers .md trouv√©s : {len(md_files)}")
    for md_file in md_files:
        print(f"  ‚Ä¢ {md_file.name}")
    
    # On ne devrait avoir que README.md et README_KICKSTART.md
    expected_md = {"README.md", "README_KICKSTART.md"}
    actual_md = {f.name for f in md_files}
    
    if actual_md == expected_md:
        print("‚úÖ Seulement les fichiers MD n√©cessaires pr√©sents")
        return True
    else:
        extra = actual_md - expected_md
        missing = expected_md - actual_md
        
        if extra:
            print(f"‚ö†Ô∏è Fichiers MD suppl√©mentaires : {extra}")
        if missing:
            print(f"‚ùå Fichiers MD manquants : {missing}")
        
        return len(missing) == 0

def check_scripts():
    """V√©rifier que les scripts principaux sont ex√©cutables"""
    print("\nüîß V√âRIFICATION SCRIPTS")
    print("-" * 40)
    
    scripts = [
        "docker_start.py",
        "deploy.py", 
        "maintenance.py",
        "bypass_migrations.py",
        "test_password_reset.py"
    ]
    
    all_ok = True
    
    for script in scripts:
        if Path(script).exists():
            try:
                # Test d'import basique
                import subprocess
                result = subprocess.run([sys.executable, "-m", "py_compile", script], 
                                      capture_output=True, text=True)
                if result.returncode == 0:
                    print(f"‚úÖ {script} - Syntaxe OK")
                else:
                    print(f"‚ùå {script} - Erreur syntaxe")
                    all_ok = False
            except Exception as e:
                print(f"‚ö†Ô∏è {script} - Erreur test: {e}")
                all_ok = False
        else:
            print(f"‚ùå {script} - Fichier manquant")
            all_ok = False
    
    return all_ok

def check_docker():
    """V√©rifier configuration Docker"""
    print("\nüê≥ V√âRIFICATION DOCKER")
    print("-" * 40)
    
    docker_files = [
        "Dockerfile",
        "docker-compose.yml", 
        "docker-compose.prod.yml",
        ".dockerignore"
    ]
    
    all_present = True
    
    for file in docker_files:
        if Path(file).exists():
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} - MANQUANT")
            all_present = False
    
    return all_present

def show_usage_summary():
    """Afficher un r√©sum√© d'utilisation"""
    print("\nüéØ R√âSUM√â D'UTILISATION")
    print("=" * 50)
    print("üìñ DOCUMENTATION CONSOLID√âE :")
    print("   ‚Ä¢ README.md - Aper√ßu rapide + lien vers guide complet")
    print("   ‚Ä¢ README_KICKSTART.md - Guide complet tout-en-un")
    print("")
    print("üöÄ D√âMARRAGE RAPIDE :")
    print("   Option 1 : python docker_start.py")
    print("   Option 2 : python deploy.py")
    print("   Option 3 : python maintenance.py && python run.py")
    print("")
    print("üß™ TESTS :")
    print("   ‚Ä¢ python test_password_reset.py - Test syst√®me reset")
    print("   ‚Ä¢ python test_docker.py - Test Docker (si install√©)")
    print("   ‚Ä¢ python maintenance.py - Test g√©n√©ral")
    print("")
    print("üìö AIDE :")
    print("   ‚Ä¢ Tout est dans README_KICKSTART.md")
    print("   ‚Ä¢ Recherche : Ctrl+F dans README_KICKSTART.md")

def main():
    """Fonction principale de v√©rification"""
    print("üîç V√âRIFICATION POST-CONSOLIDATION DATAALIGN")
    print("=" * 60)
    print("üéØ Validation apr√®s simplification documentation")
    print("=" * 60)
    
    checks = [
        ("Fichiers essentiels", check_files),
        ("Documentation", check_documentation), 
        ("Fichiers MD", check_md_files),
        ("Scripts", check_scripts),
        ("Docker", check_docker)
    ]
    
    results = []
    
    for check_name, check_func in checks:
        try:
            result = check_func()
            results.append((check_name, result))
        except Exception as e:
            print(f"‚ùå Erreur dans {check_name}: {e}")
            results.append((check_name, False))
    
    # R√©sum√©
    print("\nüìã R√âSUM√â DES V√âRIFICATIONS")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for check_name, result in results:
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        print(f"{check_name:<20} : {status}")
        if result:
            passed += 1
    
    print("-" * 50)
    print(f"Score : {passed}/{total} v√©rifications pass√©es")
    
    if passed == total:
        print("üéâ TOUTES LES V√âRIFICATIONS SONT PASS√âES !")
        print("‚úÖ Votre documentation consolid√©e est pr√™te")
        
        show_usage_summary()
        
        return True
    else:
        print("‚ö†Ô∏è Certaines v√©rifications ont √©chou√©")
        print("üîß V√©rifiez les erreurs ci-dessus")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
