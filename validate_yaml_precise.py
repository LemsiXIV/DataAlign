#!/usr/bin/env python3
"""
Validation YAML pr√©cise pour GitLab CI
"""
import re
from pathlib import Path

def validate_yaml_structure():
    """Validation pr√©cise de la structure YAML"""
    gitlab_file = Path('.gitlab-ci.yml')
    
    with open(gitlab_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    print("üîç VALIDATION YAML PR√âCISE")
    print("=" * 40)
    
    errors = []
    warnings = []
    
    # Analyser ligne par ligne
    for i, line in enumerate(lines, 1):
        line_content = line.rstrip()
        
        # V√©rifier structure cl√©: valeur au niveau racine
        if line_content and not line_content.startswith(' ') and not line_content.startswith('#'):
            if ':' in line_content:
                # C'est une cl√© de niveau racine
                if not line_content.endswith(':'):
                    # Doit avoir une valeur apr√®s :
                    parts = line_content.split(':', 1)
                    if len(parts) == 2 and not parts[1].strip():
                        errors.append(f"Ligne {i}: Cl√© sans valeur - '{line_content}'")
        
        # V√©rifier les listes mal form√©es
        if line_content.strip().startswith('-'):
            # C'est un √©l√©ment de liste
            stripped = line_content.lstrip()
            if not stripped.startswith('- '):
                if stripped.startswith('-') and len(stripped) > 1 and stripped[1] != ' ':
                    errors.append(f"Ligne {i}: Tiret sans espace - '{line_content.strip()}'")
        
        # V√©rifier les probl√®mes de guillemets
        if '"' in line_content:
            # Compter les guillemets
            quote_count = line_content.count('"')
            if quote_count % 2 != 0:
                errors.append(f"Ligne {i}: Guillemets non ferm√©s - '{line_content.strip()}'")
        
        # V√©rifier indentation multiple de 2
        if line_content.startswith(' '):
            indent = len(line_content) - len(line_content.lstrip())
            if indent % 2 != 0:
                errors.append(f"Ligne {i}: Indentation impaire ({indent} espaces) - '{line_content.strip()}'")
    
    # V√©rifier structure globale
    content = ''.join(lines)
    
    # V√©rifier que chaque job a les cl√©s requises
    job_pattern = r'^([a-zA-Z_][a-zA-Z0-9_]*):(?:\s*#.*)?$'
    jobs = []
    
    for i, line in enumerate(lines):
        match = re.match(job_pattern, line)
        if match:
            job_name = match.group(1)
            if job_name not in ['stages', 'variables', 'cache', 'before_script']:
                jobs.append((job_name, i+1))
    
    print(f"üìã Jobs d√©tect√©s: {[job[0] for job in jobs]}")
    
    # V√©rifier chaque job
    for job_name, line_num in jobs:
        job_section = extract_job_content(lines, line_num-1)
        if 'stage:' not in job_section:
            warnings.append(f"Job {job_name}: 'stage:' manquant")
        if 'script:' not in job_section:
            errors.append(f"Job {job_name}: 'script:' manquant")
    
    # Affichage des r√©sultats
    print(f"\nüìä R√âSULTATS:")
    print(f"‚úÖ Lignes analys√©es: {len(lines)}")
    print(f"üìã Jobs trouv√©s: {len(jobs)}")
    print(f"‚ùå Erreurs: {len(errors)}")
    print(f"‚ö†Ô∏è Avertissements: {len(warnings)}")
    
    if errors:
        print(f"\n‚ùå ERREURS CRITIQUES:")
        for error in errors:
            print(f"  ‚Ä¢ {error}")
    
    if warnings:
        print(f"\n‚ö†Ô∏è AVERTISSEMENTS:")
        for warning in warnings[:5]:  # Limiter l'affichage
            print(f"  ‚Ä¢ {warning}")
    
    if not errors:
        print(f"\n‚úÖ AUCUNE ERREUR DE SYNTAXE YAML")
        print(f"üöÄ Le fichier devrait √™tre accept√© par GitLab")
        return True
    else:
        print(f"\n‚ùå CORRECTIONS N√âCESSAIRES")
        return False

def extract_job_content(lines, start_idx):
    """Extrait le contenu d'un job"""
    content = ""
    i = start_idx + 1
    
    while i < len(lines):
        line = lines[i]
        # Arr√™ter au prochain job (ligne sans indentation avec :)
        if line.strip() and not line.startswith(' ') and ':' in line:
            break
        content += line
        i += 1
    
    return content

def main():
    print("üéØ VALIDATION YAML GITLAB-CI PR√âCISE")
    print("üîç Recherche d'erreurs de syntaxe YAML exactes")
    print("=" * 50)
    
    is_valid = validate_yaml_structure()
    
    if is_valid:
        print("\nüéâ VALIDATION R√âUSSIE!")
        print("‚úÖ Votre .gitlab-ci.yml est syntaxiquement correct")
    else:
        print("\nüîß VALIDATION √âCHOU√âE")
        print("‚ùå Corrigez les erreurs list√©es ci-dessus")

if __name__ == "__main__":
    main()
